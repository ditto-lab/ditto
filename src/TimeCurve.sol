pragma solidity ^0.8.4;
//SPDX-License-Identifier: MIT

import "abdk-libraries-solidity/ABDKMath64x64.sol";

library TimeCurve {

    // use 7 as abdk 64.64 int for math
    int128 private constant SEVEN = 7<<64;
    int128 private constant SECONDS_IN_DAY = 86400<<64;

    // I'm so sorry for this absolutely ass ugly beast of function -calvbore
    // returns the cube root of a uint < 256 as an abdk 64x64 decimal int128
    function cbrt(uint256 x) internal pure returns(int128) {
        if (x == 0) {return 0;} // this line may never be used within ditto?
        if (x == 1) {return 18446744073709551616;} // 1<<64
        if (x == 2) {return 23241441162429415667;}
        if (x == 3) {return 26604808708207649123;}
        if (x == 4) {return 29282380911687819630;}
        if (x == 5) {return 31543488721848360548;}
        if (x == 6) {return 33519958474798103921;}
        if (x == 7) {return 35287351908079219550;}
        if (x == 8) {return 36893488147419103232;} // 2<<64
        if (x == 9) {return 38370773879404125695;}
        if (x == 10) {return 39742305349951774985;}
        if (x == 11) {return 41025191545255535236;}
        if (x == 12) {return 42232501430089307454;}
        if (x == 13) {return 43374469258065185699;}
        if (x == 14) {return 44459277451451945315;}
        if (x == 15) {return 45493582886783465869;}
        if (x == 16) {return 46482882324858831334;}
        if (x == 17) {return 47431773432170973077;}
        if (x == 18) {return 48344145704707832758;}
        if (x == 19) {return 49223322323414289152;}
        if (x == 20) {return 50072167145307785668;}
        if (x == 21) {return 50893168267228984250;}
        if (x == 22) {return 51688502404978582624;}
        if (x == 23) {return 52460086359733279951;}
        if (x == 24) {return 53209617416415298246;}
        if (x == 25) {return 53938606916766596532;}
        if (x == 26) {return 54648406822660336983;}
        if (x == 27) {return 55340232221128654848;} // 3<<64
        if (x == 28) {return 56015179586639291420;}
        if (x == 29) {return 56674242276360615961;}
        if (x == 30) {return 57318322889480155078;}
        if (x == 31) {return 57948244888653359166;}
        if (x == 32) {return 58564761823375639260;}
        if (x == 33) {return 59168564893147437257;}
        if (x == 34) {return 59760289772769533187;}
        if (x == 35) {return 60340523068703471016;}
        if (x == 36) {return 60909806930757577066;}
        if (x == 37) {return 61468643663772978448;}
        if (x == 38) {return 62017499970374740015;}
        if (x == 39) {return 62556809533516034677;}
        if (x == 40) {return 63086977259229280360;}
        if (x == 41) {return 63608380936833106634;}
        if (x == 42) {return 64121374005943965776;}
        if (x == 43) {return 64626287401150540134;}
        if (x == 44) {return 65123432319025353189;}
        if (x == 45) {return 65613100402592210288;}
        if (x == 46) {return 66095567061740131916;}
        if (x == 47) {return 66571091104288472216;}
        if (x == 48) {return 67039917134063648579;}
        if (x == 49) {return 67502275919834023109;}
        if (x == 50) {return 67958386239984310004;}
        if (x == 51) {return 68408454882515575546;}
        if (x == 52) {return 68852678120784764005;}
        if (x == 53) {return 69291241897972138374;}
        if (x == 54) {return 69724323487288247001;}
        if (x == 55) {return 70152090754104160643;}
        if (x == 56) {return 70574704000625879837;}
        if (x == 57) {return 70992315412492012685;}
        if (x == 58) {return 71405070718980741495;}
        if (x == 59) {return 71813108639607500560;}
        if (x == 60) {return 72216561437527298380;}
        if (x == 61) {return 72615556026339362075;}
        if (x == 62) {return 73010213601152255917;}
        if (x == 63) {return 73400650007518762803;}
        if (x == 64) {return 73786976294838206464;} // 4<<64
        if (x == 65) {return 74169299085291332940;}
        if (x == 66) {return 74547720389372869846;}
        if (x == 67) {return 74922338343761289317;}
        if (x == 68) {return 75293247026851367272;}
        if (x == 69) {return 75660537012156505623;}
        if (x == 70) {return 76024295183841291544;}
        if (x == 71) {return 76384605290123819676;}
        if (x == 72) {return 76741547943275692128;}
        if (x == 73) {return 77095200619622018483;}
        if (x == 74) {return 77445638028476297262;}
        if (x == 75) {return 77792932665542738145;}
        if (x == 76) {return 78137153521644176806;}
        if (x == 77) {return 78478368296331363758;}
        if (x == 78) {return 78816641184273675511;}
        if (x == 79) {return 79152035273335844151;}
        if (x == 80) {return 79484610699903549971;}
        if (x == 81) {return 79814426124622947369;}
        if (x == 82) {return 80141538178998342631;}
        if (x == 83) {return 80466001280924753203;}
        if (x == 84) {return 80787868741492552103;}
        if (x == 85) {return 81107191658182823507;}
        if (x == 86) {return 81424019837204566432;}
        if (x == 87) {return 81738401424559813259;}
        if (x == 88) {return 82050383090511070473;}
        if (x == 89) {return 82360010214048759400;}
        if (x == 90) {return 82667326513956334732;}
        if (x == 91) {return 82972374786680047474;}
        if (x == 92) {return 83275196352926622736;}
        if (x == 93) {return 83575831426598141205;}
        if (x == 94) {return 83874318930324598408;}
        if (x == 95) {return 84170697233333667661;}
        if (x == 96) {return 84465002675711174172;}
        if (x == 97) {return 84757271413075502411;}
        if (x == 98) {return 85047538309772951690;}
        if (x == 99) {return 85335837307812617633;}
        if (x == 100) {return 85622201242398951445;}
        if (x == 101) {return 85906662579801522853;}
        if (x == 102) {return 86189252310550375690;}
        if (x == 103) {return 86470001056240672314;}
        if (x == 104) {return 86748938516130371398;}
        if (x == 105) {return 87026093467140227927;}
        if (x == 106) {return 87301494317256115415;}
        if (x == 107) {return 87575168552126703689;}
        if (x == 108) {return 87847142919530899627;}
        if (x == 109) {return 88117443429377847161;}
        if (x == 110) {return 88386095907109249484;}
        if (x == 111) {return 88653124886894724629;}
        if (x == 112) {return 88918555087371331367;}
        if (x == 113) {return 89182409935904043310;}
        if (x == 114) {return 89444712675390393331;}
        if (x == 115) {return 89705485810858151355;}
        if (x == 116) {return 89964751662867646573;}
        if (x == 117) {return 90222531814109445223;}
        if (x == 118) {return 90478847109404350597;}
        if (x == 119) {return 90733718393573165988;}
        if (x == 120) {return 90987165958034372476;}
        if (x == 121) {return 91239209171869247455;}
        if (x == 122) {return 91489867588626509059;}
        if (x == 123) {return 91739160023985112470;}
        if (x == 124) {return 91987104924689131398;}
        if (x == 125) {return 92233720368547758080;} // 5<<64
        if (x == 126) {return 92479024064435303274;}
        if (x == 127) {return 92723033167823755533;}
        if (x == 128) {return 92965764649717662668;}
        if (x == 129) {return 93207235296654131755;}
        if (x == 130) {return 93447461157300506921;}
        if (x == 131) {return 93686458280324132295;}
        if (x == 132) {return 93924242160990029791;}
        if (x == 133) {return 94160828110095780589;}
        if (x == 134) {return 94396231253971525130;}
        if (x == 135) {return 94630465981077640908;}
        if (x == 136) {return 94863546864341946154;}
        if (x == 137) {return 95095488107757377624;}
        if (x == 138) {return 95326303177447109126;}
        if (x == 139) {return 95556006092936636679;}
        if (x == 140) {return 95784609766946811879;}
        if (x == 141) {return 96012127481133367799;}
        if (x == 142) {return 96238572148217156033;}
        if (x == 143) {return 96463955943049265232;}
        if (x == 144) {return 96688291593883106253;}
        if (x == 145) {return 96911590906634886272;}
        if (x == 146) {return 97133866056155693937;}
        if (x == 147) {return 97355128479426854948;}
        if (x == 148) {return 97575389613429695004;}
        if (x == 149) {return 97794660895145539805;}
        if (x == 150) {return 98012953392620833577;}
        if (x == 151) {return 98230277620499698336;}
        if (x == 152) {return 98446644646828578305;}
        if (x == 153) {return 98662064617316714026;}
        if (x == 154) {return 98876548046608227514;}
        if (x == 155) {return 99090105080412359307;}
        if (x == 156) {return 99302745311036027736;}
        if (x == 157) {return 99514478884188473341;}
        if (x == 158) {return 99725315392176614450;}
        if (x == 159) {return 99935264058372487918;}
        if (x == 160) {return 100144334106148130600;}
        if (x == 161) {return 100352535127810460825;}
        if (x == 162) {return 100559875608861752500;}
        if (x == 163) {return 100766364588206601742;}
        if (x == 164) {return 100972010920282163931;}
        if (x == 165) {return 101176822721655831500;}
        if (x == 166) {return 101380808846764759830;}
        if (x == 167) {return 101583977412176341353;}
        if (x == 168) {return 101786336349990527763;}
        if (x == 169) {return 101987893961242152230;}
        if (x == 170) {return 102188658178031166450;}
        if (x == 171) {return 102388636379055199906;}
        if (x == 172) {return 102587836680881645029;}
        if (x == 173) {return 102786266277740690568;}
        if (x == 174) {return 102983932548329966005;}
        if (x == 175) {return 103180843055814541562;}
        if (x == 176) {return 103377004809957165249;}
        if (x == 177) {return 103572425004988025811;}
        if (x == 178) {return 103767110466202430522;}
        if (x == 179) {return 103961068203363127391;}
        if (x == 180) {return 104154304672830542217;}
        if (x == 181) {return 104346827068834863746;}
        if (x == 182) {return 104538641478801636303;}
        if (x == 183) {return 104729754543558726422;}
        if (x == 184) {return 104920172719466559902;}
        if (x == 185) {return 105109902278418121805;}
        if (x == 186) {return 105298949123371515717;}
        if (x == 187) {return 105487319895154608175;}
        if (x == 188) {return 105675020127790621290;}
        if (x == 189) {return 105862055908705099387;}
        if (x == 190) {return 106048433140856146053;}
        if (x == 191) {return 106234157542734424138;}
        if (x == 192) {return 106419234832830596492;}
        if (x == 193) {return 106603670729635325965;}
        if (x == 194) {return 106787470398236953195;}
        if (x == 195) {return 106970639741593581770;}
        if (x == 196) {return 107153183740326111591;}
        if (x == 197) {return 107335108112925205509;}
        if (x == 198) {return 107516417655544322687;}
        if (x == 199) {return 107697117902206685238;}
        if (x == 200) {return 107877213833533193065;}
        if (x == 201) {return 108056710245677305331;}
        if (x == 202) {return 108235612488194803412;}
        if (x == 203) {return 108413925172771705737;}
        if (x == 204) {return 108591653280028912205;}
        if (x == 205) {return 108768801421652441246;}
        if (x == 206) {return 108945374393795752022;}
        if (x == 207) {return 109121376992612303699;}
        if (x == 208) {return 109296813645320673967;}
        if (x == 209) {return 109471688779139440517;}
        if (x == 210) {return 109646007005754621775;}
        if (x == 211) {return 109819772752384795431;}
        if (x == 212) {return 109992990446248539177;}
        if (x == 213) {return 110165664145629549229;}
        if (x == 214) {return 110337798277746403276;}
        if (x == 215) {return 110509397085350238272;}
        if (x == 216) {return 110680464442257309696;} // 6<<64
        if (x == 217) {return 110851004775686195237;}
        if (x == 218) {return 111021021959453150376;}
        if (x == 219) {return 111190519867374430591;}
        if (x == 220) {return 111359502742201172836;}
        if (x == 221) {return 111527974273282191851;}
        if (x == 222) {return 111695938334433743117;}
        if (x == 223) {return 111863398799472082112;}
        if (x == 224) {return 112030359173278582841;}
        if (x == 225) {return 112196823698604382257;}
        if (x == 226) {return 112362795511395972892;}
        if (x == 227) {return 112528278485469610223;}
        if (x == 228) {return 112693276125706668256;}
        if (x == 229) {return 112857792121455961732;}
        if (x == 230) {return 113021829977598864657;}
        if (x == 231) {return 113185392830081869561;}
        if (x == 232) {return 113348484368253791186;}
        if (x == 233) {return 113511107912528562799;}
        if (x == 234) {return 113673266967787558406;}
        if (x == 235) {return 113834964485509829800;}
        if (x == 236) {return 113996204155044191723;}
        if (x == 237) {return 114156988743402255231;}
        if (x == 238) {return 114317321939932835067;}
        if (x == 239) {return 114477206511647542286;}
        if (x == 240) {return 114636645594492869420;}
        if (x == 241) {return 114795642508882749736;}
        if (x == 242) {return 114954200206296235027;}
        if (x == 243) {return 115112321822679817824;}
        if (x == 244) {return 115270010125045109184;}
        if (x == 245) {return 115427268249338601638;}
        if (x == 246) {return 115584098962571906241;}
        if (x == 247) {return 115740505216224074787;}
        if (x == 248) {return 115896489961774159070;}
        if (x == 249) {return 116052055781766329409;}
        if (x == 250) {return 116207205812147078335;}
        if (x == 251) {return 116361942635460576167;}
        if (x == 252) {return 116516269018718433961;}
        if (x == 253) {return 116670187544464822037;}
        if (x == 254) {return 116823701164178792188;}
        if (x == 255) {return 116976812460404514735;}
        revert();
    }

    function calc(uint256 heat) internal pure returns(uint128) {
        // 7*log(cbrt(heat))*sqrt(heat)
        int128 h = ABDKMath64x64.fromUInt(heat);        // convert heat

        int128 hSqrt = ABDKMath64x64.sqrt(h);           // square root of heat
        int128 hCbrt = cbrt(heat);                      // cube root of heat
        int128 hCbLg = ABDKMath64x64.log_2(hCbrt);      // base 2 log of heat's cube root

        int128 log7   = ABDKMath64x64.mul(SEVEN, hCbLg); // multiply log by 7
        int128 base   = ABDKMath64x64.mul(log7, hSqrt);  // multiply log by sqrt of heat
        int128 length = ABDKMath64x64.mul(SECONDS_IN_DAY, base);      // multiply base by 1 day

        return ABDKMath64x64.toUInt(length);  // convert from abdk 64.64 to uint128
    }

}
